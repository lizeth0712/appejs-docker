<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <link rel="stylesheet" href="/css/tecnico.css" />
  <title>Técnico</title>
  
  <!--Load the AJAX API-->
  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
  <script type="text/javascript">
    google.charts.load('current', {'packages': ['corechart']});
    google.charts.setOnLoadCallback(drawChart);
  
    function drawChart() {
      const countAprobado = parseInt(document.getElementById('countAprobado').value) || 0;
      const countCompletado = parseInt(document.getElementById('countCompletado').value) || 0;
  
      const data = google.visualization.arrayToDataTable([
        ['Status', 'Requests', { role: 'style' }],
        ['Approved', countAprobado, 'color: red'],
        ['Completed', countCompletado, 'color: green']
      ]);
  
      const max = Math.max(countAprobado, countCompletado);
      const ticks = [];
      for (let i = 0; i <= max + 1; i++) ticks.push(i); // Genera [0, 1, 2, ..., N]
  
      const options = {
        title: 'Test Requests',
        legend: { position: 'none' },
        width: 300,
        height: 200,
        vAxis: {
          title: 'Amount',
          format: '0',
          ticks: ticks
        },
        hAxis: {
          title: 'Status'
        }
      };
  
      const chart = new google.visualization.ColumnChart(document.getElementById('chart_div'));
      chart.draw(data, options);
    }
  </script>
  
  
  

</head>
<body>
  <!-- NAVBAR -->
  <nav class="navbar navbar-dark">
    <div class="containerNavBar">
      <a href="#" class="navbar-brand">
        <img src="img/logo.png" alt="Coficab Logo" width="120" />
      </a>
      <div>
        <span>Hola, <%= nombre %></span>
        <a href="/logout">LOGOUT</a>
      </div>
    </div>
  </nav>

  <!-- Container -->
  <div class="container">
    <!-- Test Request -->
    <section class="test-request-section">
      <h3>Test Request Selection</h3>
      <input type="text" placeholder="Search..." class="search-box" />
      <ul class="test-list">
        <% solicitudes.forEach(solicitud => { %>
          <li data-id="<%= solicitud.ID %>">
            TR-<%= solicitud.ID %> <br />
            <span>Rec. Date: <%= solicitud.fecha_creacion.toISOString().split('T')[0] %></span>
          </li>
        <% }) %>
      </ul>
       <!--Div that will hold the pie chart-->
       
       <div id="chart_div" style="margin-top: 10px;"></div>

    </section>

    <!-- Test Selection -->
    <!-- TEST SELECTION -->
    <section class="test-selection-section">
      <h3>Test Selection</h3>
      <ul class="test-list" id="test-info">
        <li>
          <span id="tipo-prueba"><%= cableData.tipo_prueba %></span><br />
          <span id="estandar-prueba">Standard: <%= cableData.estandar %></span>
        </li>
      </ul>
      <input type="hidden" id="countAprobado" value="<%= countAprobado %>">
      <input type="hidden" id="countCompletado" value="<%= countCompletado %>">

    </section>


    <!-- Datos -->
    <section class="data-section">
      <div class="environment-data">
        <label>Temperature:</label>
        <input type="text" id="temperature" />
        <label>Humidity:</label>
        <input type="text" id="humidity" />
        <label>Atmospheric Pressure:</label>
        <input type="text" id="pressure" />
      </div>

      <table>
        <thead>
          <tr>
            <th>Family</th>
            <th>Cross Section</th>
            <th>Color</th>
            <th>Header</th>
            <th>Value</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td id="familia"><%= cableData.familia || '' %></td>
            <td><strong id="calibre"><%= cableData.calibre || '' %> mm</strong></td>
            <td id="color"><%= cableData.color || '' %></td>

            <td>Value 1 Min</td>
            <td><input type="text" class="valor" /></td>
          </tr>
          <tr>
            <td></td><td></td><td></td>
            <td>Value 1 Max</td>
            <td><input type="text" class="valor" /></td>
          </tr>
          <tr>
            <td></td><td></td><td></td>
            <td>Value 2 Min</td>
            <td><input type="text" class="valor" /></td>
          </tr>
          <tr>
            <td></td><td></td><td></td>
            <td>Value 2 Max</td>
            <td><input type="text" class="valor" /></td>
          </tr>
          <tr>
            <td></td><td></td><td></td>
            <td>Value 3 Min</td>
            <td><input type="text" class="valor" /></td>
          </tr>
          <tr>
            <td></td><td></td><td></td>
            <td>Value 3 Max</td>
            <td><input type="text" class="valor" /></td>
          </tr>
          <tr>
            <td></td><td></td><td></td>
            <td>Average</td>
            <td><input type="text" id="avg" readonly /></td>
          </tr>
          <tr>
            <td></td><td></td><td></td>
            <td>Status</td>
            <td><input type="text" /></td>
          </tr>
        </tbody>
      </table>

      <button class="save-btn">SAVE</button>
    </section>
  </div>
  <script>
    const trItems = document.querySelectorAll(".test-request-section li");
  
    trItems.forEach(item => {
      item.addEventListener("click", async () => {
        const trId = item.dataset.id;
        try {
          const res = await fetch(`/api/tr/${trId}`);
          const data = await res.json();
  
          if (data.error) {
            alert(data.error);
            return;
          }
  
          // Actualizar DOM
          document.getElementById("tipo-prueba").textContent = data.tipo_prueba;
          document.getElementById("estandar-prueba").textContent = `Standard: ${data.estandar}`;
          document.getElementById("familia").textContent = data.familia;
          document.getElementById("calibre").textContent = `${data.calibre} mm`;
          document.getElementById("color").textContent = data.color;
  
          // Limpiar campos de valores
          document.querySelectorAll('.valor').forEach(input => input.value = "");
          document.getElementById("avg").value = "";
  
        } catch (err) {
          console.error("Error cargando TR:", err);
          alert("Error al cargar la solicitud seleccionada");
        }
      });
    });
  </script>
  
</body>
</html>
<script>
  // Función para calcular el promedio de los 6 valores
  function calcularPromedio() {
    const valores = document.querySelectorAll('.valor');
    let suma = 0;
    let count = 0;

    valores.forEach(input => {
      const num = parseFloat(input.value);
      if (!isNaN(num)) {
        suma += num;
        count++;
      }
    });

    if (count === 6) {
      const avg = (suma / 6).toFixed(2);
      document.getElementById("avg").value = avg;
    } else {
      document.getElementById("avg").value = "";
    }
  }

  // Escuchar cambios en los inputs de valor
  document.querySelectorAll('.valor').forEach(input => {
    input.addEventListener('input', calcularPromedio);
  });
</script>

