<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <link rel="stylesheet" href="/css/tecnico.css" />
  <title>T√©cnico</title>
  
  <script src="https://unpkg.com/lucide@latest"></script>
  <!--Load the AJAX API-->
  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
  <script type="text/javascript">
    google.charts.load('current', {'packages': ['corechart']});
    google.charts.setOnLoadCallback(drawChart);
  
    function drawChart() {
      const countAprobado = parseInt(document.getElementById('countAprobado').value) || 0;
      const countCompletado = parseInt(document.getElementById('countCompletado').value) || 0;
  
      const data = google.visualization.arrayToDataTable([
        ['Status', 'Requests', { role: 'style' }],
        ['Approved', countAprobado, 'color: red'],
        ['Completed', countCompletado, 'color: green']
      ]);
  
      const max = Math.max(countAprobado, countCompletado);
      const ticks = [];
      for (let i = 0; i <= max + 1; i++) ticks.push(i); // Genera [0, 1, 2, ..., N]
  
      const options = {
        title: 'Test Requests',
        legend: { position: 'none' },
        width: 300,
        height: 200,
        vAxis: {
          title: 'Amount',
          format: '0',
          ticks: ticks
        },
        hAxis: {
          title: 'Status'
        }
      };
  
      const chart = new google.visualization.ColumnChart(document.getElementById('chart_div'));
      chart.draw(data, options);
    }
  </script>
  
  
  

</head>
<body>


  
  <!-- NAVBAR -->
  <nav class="navbar navbar-dark">
    <div class="containerNavBar">
      <a href="#" class="navbar-brand">
        <img src="img/logo.png" alt="Coficab Logo" width="120" />
      </a>
      <div>
        <span>Hello, <%= nombre %></span>
        <a href="/logout" title="Cerrar sesi√≥n" class="nav-icon">
          <i data-lucide="log-out"></i>
        </a>

      </div>
    </div>
  </nav>

  <!-- Container -->
  <div class="container">
    <!-- Test Request -->
    <section class="test-request-section">
      <h3>Test Request Selection</h3>
      <input type="text" placeholder="Search..." class="search-box" />
      <ul class="test-list">
        <% solicitudes.forEach(solicitud => { %>
          <li data-id="<%= solicitud.ID %>">
            TR-<%= solicitud.ID %> <br />
            <span>Rec. Date: <%= solicitud.fecha_creacion.toISOString().split('T')[0] %></span>
          </li>
        <% }) %>
      </ul>
       <!--Div that will hold the pie chart-->
       
       <div id="chart_div" style="margin-top: 10px;"></div>

    </section>

    <!-- Test Selection -->
    <!-- TEST SELECTION -->
    <section class="test-selection-section">
      <h3>Test Selection</h3>
      <ul class="test-list" id="test-info">
        <li>
          <span id="tipo-prueba"><%= cableData.tipo_prueba %></span><br />
          <span id="estandar-prueba">Standard: <%= cableData.estandar %></span>
        </li>
      </ul>
      <input type="hidden" id="countAprobado" value="<%= countAprobado %>">
      <input type="hidden" id="countCompletado" value="<%= countCompletado %>">

    </section>


    <!-- Datos -->
    <section class="data-section">
      <div class="environment-data">
        <label>Temperature:</label>
        <input type="text" id="temperature" />
        <label>Humidity:</label>
        <input type="text" id="humidity" />
        <label>Atmospheric Pressure:</label>
        <input type="text" id="pressure" />
      </div>

      <table>
        <thead>
          <tr>
            <th>Family</th>
            <th>Cross Section</th>
            <th>Color</th>
            <th>Header</th>
            <th>Value</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td id="familia"><%= cableData.familia || '' %></td>
            <td><strong id="calibre"><%= cableData.calibre || '' %> mm</strong></td>
            <td id="color"><%= cableData.color || '' %></td>

            <td>Value 1 Min</td>
            <td><input type="text" class="valor" /></td>
          </tr>
          <tr>
            <td></td><td></td><td></td>
            <td>Value 1 Max</td>
            <td><input type="text" class="valor" /></td>
          </tr>
          <tr>
            <td></td><td></td><td></td>
            <td>Value 2 Min</td>
            <td><input type="text" class="valor" /></td>
          </tr>
          <tr>
            <td></td><td></td><td></td>
            <td>Value 2 Max</td>
            <td><input type="text" class="valor" /></td>
          </tr>
          <tr>
            <td></td><td></td><td></td>
            <td>Value 3 Min</td>
            <td><input type="text" class="valor" /></td>
          </tr>
          <tr>
            <td></td><td></td><td></td>
            <td>Value 3 Max</td>
            <td><input type="text" class="valor" /></td>
          </tr>
          <tr>
            <td></td><td></td><td></td>
            <td>Average</td>
            <td><input type="text" id="avg" readonly /></td>
          </tr>
          <tr>
            <td></td><td></td><td></td>
            <td>Specifications</td>
            <td><input type="text" id="specs" readonly /></td>
          </tr>
          
          <tr>
            <td></td><td></td><td></td>
            <td>Status</td>
            <td><input type="text" id="status" readonly /></td>
          </tr>
          
        </tbody>
      </table>

      <button class="save-btn" id="guardarBtn">SAVE</button>
      <button class="save-btn" id="completedBtn" style="background-color: green;">COMPLETED</button>
      <span id="warningMsg" style="color: red; margin-left: 10px;"></span>
    </section>
  </div>
  <script>
    const trItems = document.querySelectorAll(".test-request-section li");
  
    trItems.forEach(item => {
  item.addEventListener("click", async () => {
    // üëâ L√ìGICA NUEVA: resaltar el seleccionado
    trItems.forEach(li => li.classList.remove("selected"));
    item.classList.add("selected");

    const trId = item.dataset.id;
    try {
      const res = await fetch(`/api/tr/${trId}`);
      const data = await res.json();
          if (data.error) {
            alert(data.error);
            return;
          }
  
          // Actualizar DOM
          document.getElementById("tipo-prueba").textContent = data.tipo_prueba;
          document.getElementById("estandar-prueba").textContent = `Standard: ${data.estandar}`;
          document.getElementById("familia").textContent = data.familia;
          document.getElementById("calibre").textContent = `${data.calibre} mm`;
          document.getElementById("color").textContent = data.color;
  
          // Limpiar valores anteriores
          document.querySelectorAll('.valor').forEach(input => input.value = "");
          document.getElementById("avg").value = "";
          document.getElementById("specs").value = "";
  
          // Especificaciones din√°micas
          const calibreNum = parseFloat(data.calibre);
          const tipoPrueba = data.tipo_prueba.trim();
          let specText = "";
  
          if (tipoPrueba === "VW-1 Flame Test") {
            specText = "Max 100 mm";
          } else if (tipoPrueba === "Cable Outside Diameter") {
            if (calibreNum === 0.35) specText = "0.3 - 0.5 mm";
            else if (calibreNum === 0.5) specText = "0.4 - 0.6 mm";
            else if (calibreNum === 0.75) specText = "0.6 - 0.9 mm";
            else if (calibreNum === 1.0) specText = "0.8 - 1.2 mm";
            else specText = "OD: Sin especificaci√≥n definida para este calibre";
          } else if (tipoPrueba === "Insulation Thickness") {
            if (calibreNum === 0.35) specText = "Min: 0.1 mm | Prom: 0.2 mm";
            else if (calibreNum === 0.5) specText = "Min: 0.15 mm | Prom: 0.25 mm";
            else if (calibreNum === 0.75) specText = "Min: 0.20 mm | Prom: 0.30 mm";
            else if (calibreNum === 1.0) specText = "Min: 0.25 mm | Prom: 0.35 mm";
            else specText = "Sin especificaci√≥n definida para este calibre";
          } else {
            specText = "Tipo de prueba no reconocido";
          }
  
          document.getElementById("specs").value = specText;
  
        } catch (err) {
          console.error("Error cargando TR:", err);
          alert("Error al cargar la solicitud seleccionada");
        }
      });
    });
  </script>
  <script>
    lucide.createIcons();
  </script>

<script>
  document.getElementById("guardarBtn").addEventListener("click", async () => {
    const selectedItem = document.querySelector(".test-request-section li.selected");
    const warningMsg = document.getElementById("warningMsg");

    if (!selectedItem) {
      warningMsg.textContent = "‚ö†Ô∏è Selecciona primero una solicitud.";
      warningMsg.style.color = "red";
      return;
    }

    const trId = selectedItem.dataset.id;
    const resultados = Array.from(document.querySelectorAll(".valor")).map(i => i.value.trim());
    const incompletos = resultados.some(v => v === "");

    const environment = {
      temperature: document.getElementById("temperature").value.trim(),
      humidity: document.getElementById("humidity").value.trim(),
      pressure: document.getElementById("pressure").value.trim()
    };

    const cable_info = {
      familia: document.getElementById("familia").textContent.trim(),
      calibre: document.getElementById("calibre").textContent.trim().replace(" mm", ""),
      color: document.getElementById("color").textContent.trim()
    };

    const tests = {
      valores: resultados,
      promedio: document.getElementById("avg").value,
      specs: document.getElementById("specs").value,
      status: document.getElementById("status").value
    };

    const payload = {
        test_request_id: parseInt(trId),
        environment,
        cable_info,
        tests,
        comments: "",
        start_time: new Date(),
        end_time: new Date()
      };

    try {
      console.log("Payload:", payload);

      const res = await fetch("/tecnico/guardar-resultados", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(payload)
      });

      const data = await res.json();

      if (data.error) {
        warningMsg.textContent = `‚ö†Ô∏è ${data.error}`;
        warningMsg.style.color = "red";
      } else {
        warningMsg.textContent = data.mensaje;
        warningMsg.style.color = incompletos ? "orange" : "green";
        document.getElementById("completedBtn").disabled = incompletos;
      }
    } catch (err) {
      console.error("Error al guardar:", err);
      warningMsg.textContent = "‚ö†Ô∏è Error al guardar resultados.";
      warningMsg.style.color = "red";
    }
  });
</script>

  
</body>
</html>
<script>
  // Calcular promedio y validar status
  function calcularPromedioYStatus() {
    const valores = document.querySelectorAll('.valor');
    let suma = 0;
    let count = 0;

    valores.forEach(input => {
      const num = parseFloat(input.value);
      if (!isNaN(num)) {
        suma += num;
        count++;
      }
    });

    if (count === 6) {
      const avg = (suma / 6).toFixed(2);
      document.getElementById("avg").value = avg;
    } else {
      document.getElementById("avg").value = "";
    }

    validarStatus();
  }

  // Validar status conforme o no conforme
  function validarStatus() {
    const tipoPrueba = document.getElementById("tipo-prueba").textContent.trim();
    const calibreStr = document.getElementById("calibre").textContent.trim().replace(" mm", "");
    const calibreNum = parseFloat(calibreStr);
    const valores = document.querySelectorAll('.valor');
    const statusInput = document.getElementById("status");

    let min = 0, max = 0;

    if (tipoPrueba === "Cable Outside Diameter") {
      if (calibreNum === 0.35) [min, max] = [0.3, 0.5];
      else if (calibreNum === 0.5) [min, max] = [0.4, 0.6];
      else if (calibreNum === 0.75) [min, max] = [0.6, 0.9];
      else if (calibreNum === 1.0) [min, max] = [0.8, 1.2];
    } else if (tipoPrueba === "Insulation Thickness") {
      if (calibreNum === 0.35) [min, max] = [0.1, 0.3];
      else if (calibreNum === 0.5) [min, max] = [0.15, 0.35];
      else if (calibreNum === 0.75) [min, max] = [0.20, 0.40];
      else if (calibreNum === 1.0) [min, max] = [0.25, 0.45];
    } else if (tipoPrueba === "VW-1 Flame Test") {
      [min, max] = [0, 100];
    }

    let conforme = true;
    valores.forEach(input => {
      const val = parseFloat(input.value);
      if (!isNaN(val)) {
        if (val < min || val > max) conforme = false;
      }
    });

    statusInput.value = conforme ? "C" : "NC";
  }

  // Escuchar cambios en inputs
  document.querySelectorAll('.valor').forEach(input => {
    input.addEventListener('input', calcularPromedioYStatus);
  });
</script>
<script>
  const completedBtn = document.getElementById("completedBtn");
  const warningMsg = document.getElementById("warningMsg");

  completedBtn.addEventListener("click", async () => {
    const valores = document.querySelectorAll(".valor");
    const resultados = Array.from(valores).map(v => v.value.trim());

    if (resultados.some(val => val === "")) {
      warningMsg.textContent = "‚ö†Ô∏è Por favor, llena todos los campos antes de marcar como completado.";
      warningMsg.style.color = "red";
      return;
    }

    const selectedItem = document.querySelector(".test-request-section li.selected");
    if (!selectedItem) {
      warningMsg.textContent = "‚ö†Ô∏è Selecciona primero una solicitud.";
      warningMsg.style.color = "red";
      return;
    }

    const trId = selectedItem.dataset.id;

    try {
      const res = await fetch(`/api/tr/${trId}/completar`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ resultados })
      });

      const data = await res.json();

      if (data.error) {
        warningMsg.textContent = `‚ö†Ô∏è ${data.error}`;
        warningMsg.style.color = "red";
      } else {
        warningMsg.textContent = "‚úÖ Solicitud marcada como completada.";
        warningMsg.style.color = "green";
        // Opcional: actualizar UI
      }
    } catch (err) {
      warningMsg.textContent = "‚ö†Ô∏è Error al completar la solicitud.";
      warningMsg.style.color = "red";
      console.error(err);
    }
  });
</script>
